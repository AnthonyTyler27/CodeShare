{"id":"../node_modules/@mui/lab/TreeItem/TreeItem.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\package.json","includedInParent":true,"mtime":1685965066202},{"name":"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose","loc":{"line":1,"column":42,"index":42},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@babel\\runtime\\helpers\\esm\\objectWithoutPropertiesLoose.js"},{"name":"@babel/runtime/helpers/esm/extends","loc":{"line":2,"column":21,"index":122},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@babel\\runtime\\helpers\\esm\\extends.js"},{"name":"react","loc":{"line":4,"column":23,"index":418},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react\\index.js"},{"name":"clsx","loc":{"line":5,"column":17,"index":444},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\clsx\\dist\\clsx.m.js"},{"name":"prop-types","loc":{"line":6,"column":22,"index":474},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\prop-types\\index.js"},{"name":"@mui/utils","loc":{"line":7,"column":40,"index":528},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\utils\\esm\\index.js"},{"name":"@mui/material/Collapse","loc":{"line":8,"column":21,"index":563},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\material\\Collapse\\index.js"},{"name":"@mui/material/styles","loc":{"line":9,"column":45,"index":634},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\material\\styles\\index.js"},{"name":"@mui/material/utils","loc":{"line":10,"column":59,"index":717},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\material\\utils\\index.js"},{"name":"@mui/base","loc":{"line":11,"column":58,"index":798},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\base\\index.js"},{"name":"../TreeView/TreeViewContext","loc":{"line":12,"column":28,"index":839},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeView\\TreeViewContext.js"},{"name":"../TreeView/descendants","loc":{"line":13,"column":50,"index":920},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeView\\descendants.js"},{"name":"./TreeItemContent","loc":{"line":14,"column":28,"index":975},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItemContent.js"},{"name":"./treeItemClasses","loc":{"line":15,"column":57,"index":1053},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\treeItemClasses.js"},{"name":"react/jsx-runtime","loc":{"line":17,"column":30,"index":1153},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\lab\\TreeItem\\TreeItem.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react\\jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/extends\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _Collapse = _interopRequireDefault(require(\"@mui/material/Collapse\"));\n\nvar _styles = require(\"@mui/material/styles\");\n\nvar _utils2 = require(\"@mui/material/utils\");\n\nvar _base = require(\"@mui/base\");\n\nvar _TreeViewContext = _interopRequireDefault(require(\"../TreeView/TreeViewContext\"));\n\nvar _descendants = require(\"../TreeView/descendants\");\n\nvar _TreeItemContent = _interopRequireDefault(require(\"./TreeItemContent\"));\n\nvar _treeItemClasses = _interopRequireWildcard(require(\"./treeItemClasses\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst _excluded = [\"children\", \"className\", \"collapseIcon\", \"ContentComponent\", \"ContentProps\", \"endIcon\", \"expandIcon\", \"disabled\", \"icon\", \"id\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\", \"TransitionComponent\", \"TransitionProps\"];\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    content: ['content'],\n    expanded: ['expanded'],\n    selected: ['selected'],\n    focused: ['focused'],\n    disabled: ['disabled'],\n    iconContainer: ['iconContainer'],\n    label: ['label'],\n    group: ['group']\n  };\n  return (0, _base.unstable_composeClasses)(slots, _treeItemClasses.getTreeItemUtilityClass, classes);\n};\n\nconst TreeItemRoot = (0, _styles.styled)('li', {\n  name: 'MuiTreeItem',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n  outline: 0\n});\nconst StyledTreeItemContent = (0, _styles.styled)(_TreeItemContent.default, {\n  name: 'MuiTreeItem',\n  slot: 'Content',\n  overridesResolver: (props, styles) => {\n    return [styles.content, styles.iconContainer && {\n      [`& .${_treeItemClasses.default.iconContainer}`]: styles.iconContainer\n    }, styles.label && {\n      [`& .${_treeItemClasses.default.label}`]: styles.label\n    }];\n  }\n})(({\n  theme\n}) => ({\n  padding: '0 8px',\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  cursor: 'pointer',\n  WebkitTapHighlightColor: 'transparent',\n  '&:hover': {\n    backgroundColor: (theme.vars || theme).palette.action.hover,\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  [`&.${_treeItemClasses.default.disabled}`]: {\n    opacity: (theme.vars || theme).palette.action.disabledOpacity,\n    backgroundColor: 'transparent'\n  },\n  [`&.${_treeItemClasses.default.focused}`]: {\n    backgroundColor: (theme.vars || theme).palette.action.focus\n  },\n  [`&.${_treeItemClasses.default.selected}`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, _styles.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    '&:hover': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, _styles.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, _styles.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n      }\n    },\n    [`&.${_treeItemClasses.default.focused}`]: {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, _styles.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n    }\n  },\n  [`& .${_treeItemClasses.default.iconContainer}`]: {\n    marginRight: 4,\n    width: 15,\n    display: 'flex',\n    flexShrink: 0,\n    justifyContent: 'center',\n    '& svg': {\n      fontSize: 18\n    }\n  },\n  [`& .${_treeItemClasses.default.label}`]: (0, _extends2.default)({\n    width: '100%',\n    // fixes overflow - see https://github.com/mui/material-ui/issues/27372\n    minWidth: 0,\n    paddingLeft: 4,\n    position: 'relative'\n  }, theme.typography.body1)\n}));\nconst TreeItemGroup = (0, _styles.styled)(_Collapse.default, {\n  name: 'MuiTreeItem',\n  slot: 'Group',\n  overridesResolver: (props, styles) => styles.group\n})({\n  margin: 0,\n  padding: 0,\n  marginLeft: 17\n});\nconst TreeItem = /*#__PURE__*/React.forwardRef(function TreeItem(inProps, ref) {\n  const props = (0, _styles.useThemeProps)({\n    props: inProps,\n    name: 'MuiTreeItem'\n  });\n  const {\n    children,\n    className,\n    collapseIcon,\n    ContentComponent = _TreeItemContent.default,\n    ContentProps,\n    endIcon,\n    expandIcon,\n    disabled: disabledProp,\n    icon,\n    id: idProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown,\n    TransitionComponent = _Collapse.default,\n    TransitionProps\n  } = props,\n        other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);\n  const {\n    icons: contextIcons = {},\n    focus,\n    isExpanded,\n    isFocused,\n    isSelected,\n    isDisabled,\n    multiSelect,\n    disabledItemsFocusable,\n    mapFirstChar,\n    unMapFirstChar,\n    registerNode,\n    unregisterNode,\n    treeId\n  } = React.useContext(_TreeViewContext.default);\n  let id = null;\n\n  if (idProp != null) {\n    id = idProp;\n  } else if (treeId && nodeId) {\n    id = `${treeId}-${nodeId}`;\n  }\n\n  const [treeitemElement, setTreeitemElement] = React.useState(null);\n  const contentRef = React.useRef(null);\n  const handleRef = (0, _utils2.useForkRef)(setTreeitemElement, ref);\n  const descendant = React.useMemo(() => ({\n    element: treeitemElement,\n    id: nodeId\n  }), [nodeId, treeitemElement]);\n  const {\n    index,\n    parentId\n  } = (0, _descendants.useDescendant)(descendant);\n  const expandable = Boolean(Array.isArray(children) ? children.length : children);\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  const ownerState = (0, _extends2.default)({}, props, {\n    expanded,\n    focused,\n    selected,\n    disabled\n  });\n  const classes = useUtilityClasses(ownerState);\n  let displayIcon;\n  let expansionIcon;\n\n  if (expandable) {\n    if (!expanded) {\n      expansionIcon = expandIcon || contextIcons.defaultExpandIcon;\n    } else {\n      expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;\n    }\n  }\n\n  if (expandable) {\n    displayIcon = contextIcons.defaultParentIcon;\n  } else {\n    displayIcon = endIcon || contextIcons.defaultEndIcon;\n  }\n\n  React.useEffect(() => {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (registerNode && unregisterNode && index !== -1) {\n      registerNode({\n        id: nodeId,\n        idAttribute: id,\n        index,\n        parentId,\n        expandable,\n        disabled: disabledProp\n      });\n      return () => {\n        unregisterNode(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [registerNode, unregisterNode, parentId, index, nodeId, expandable, disabledProp, id]);\n  React.useEffect(() => {\n    if (mapFirstChar && unMapFirstChar && label) {\n      mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n      return () => {\n        unMapFirstChar(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [mapFirstChar, unMapFirstChar, nodeId, label]);\n  let ariaSelected;\n\n  if (multiSelect) {\n    ariaSelected = selected;\n  } else if (selected) {\n    /* single-selection trees unset aria-selected on un-selected items.\n     *\n     * If the tree does not support multiple selection, aria-selected\n     * is set to true for the selected node and it is not present on any other node in the tree.\n     * Source: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/\n     */\n    ariaSelected = true;\n  }\n\n  function handleFocus(event) {\n    // DOM focus stays on the tree which manages focus with aria-activedescendant\n    if (event.target === event.currentTarget) {\n      let rootElement;\n\n      if (typeof event.target.getRootNode === 'function') {\n        rootElement = event.target.getRootNode();\n      } else {\n        rootElement = (0, _utils2.ownerDocument)(event.target);\n      }\n\n      rootElement.getElementById(treeId).focus({\n        preventScroll: true\n      });\n    }\n\n    const unfocusable = !disabledItemsFocusable && disabled;\n\n    if (!focused && event.currentTarget === event.target && !unfocusable) {\n      focus(event, nodeId);\n    }\n  }\n\n  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(TreeItemRoot, (0, _extends2.default)({\n    className: (0, _clsx.default)(classes.root, className),\n    role: \"treeitem\",\n    \"aria-expanded\": expandable ? expanded : null,\n    \"aria-selected\": ariaSelected,\n    \"aria-disabled\": disabled || null,\n    ref: handleRef,\n    id: id,\n    tabIndex: -1\n  }, other, {\n    ownerState: ownerState,\n    onFocus: handleFocus,\n    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(StyledTreeItemContent, (0, _extends2.default)({\n      as: ContentComponent,\n      ref: contentRef,\n      classes: {\n        root: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        focused: classes.focused,\n        disabled: classes.disabled,\n        iconContainer: classes.iconContainer,\n        label: classes.label\n      },\n      label: label,\n      nodeId: nodeId,\n      onClick: onClick,\n      onMouseDown: onMouseDown,\n      icon: icon,\n      expansionIcon: expansionIcon,\n      displayIcon: displayIcon,\n      ownerState: ownerState\n    }, ContentProps)), children && /*#__PURE__*/(0, _jsxRuntime.jsx)(_descendants.DescendantProvider, {\n      id: nodeId,\n      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TreeItemGroup, (0, _extends2.default)({\n        as: TransitionComponent,\n        unmountOnExit: true,\n        className: classes.group,\n        in: expanded,\n        component: \"ul\",\n        role: \"group\"\n      }, TransitionProps, {\n        children: children\n      }))\n    })]\n  }));\n});\n\"development\" !== \"production\" ? TreeItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: _propTypes.default.object,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: _propTypes.default.node,\n\n  /**\n   * The component used for the content node.\n   * @default TreeItemContent\n   */\n  ContentComponent: _utils.elementTypeAcceptingRef,\n\n  /**\n   * Props applied to ContentComponent\n   */\n  ContentProps: _propTypes.default.object,\n\n  /**\n   * If `true`, the node is disabled.\n   * @default false\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: _propTypes.default.node,\n\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: _propTypes.default.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: _propTypes.default.node,\n\n  /**\n   * @ignore\n   */\n  id: _propTypes.default.string,\n\n  /**\n   * The tree node label.\n   */\n  label: _propTypes.default.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: _propTypes.default.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: _propTypes.default.func,\n\n  /**\n   * This prop isn't supported.\n   * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.\n   */\n  onFocus: _utils2.unsupportedProp,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: _propTypes.default.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent: _propTypes.default.elementType,\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps: _propTypes.default.object\n} : void 0;\nvar _default = TreeItem;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"a5844af3a6198f14524d70137dfccf7e","cacheData":{"env":{"NODE_ENV":"development"}}}
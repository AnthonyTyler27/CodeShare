{"id":"../node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\package.json","includedInParent":true,"mtime":1685847516748},{"name":"@babel/runtime/helpers/esm/extends","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@babel\\runtime\\helpers\\esm\\extends.js"},{"name":"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose","loc":{"line":2,"column":42,"index":101},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@babel\\runtime\\helpers\\esm\\objectWithoutPropertiesLoose.js"},{"name":"@mui/utils","loc":{"line":7,"column":26,"index":417},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\utils\\esm\\index.js"},{"name":"react","loc":{"line":5,"column":23,"index":346},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react\\index.js"},{"name":"prop-types","loc":{"line":6,"column":22,"index":377},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\prop-types\\index.js"},{"name":"@mui/styled-engine","loc":{"line":8,"column":29,"index":460},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\styled-engine\\index.js"},{"name":"@mui/private-theming","loc":{"line":9,"column":40,"index":522},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\private-theming\\index.js"},{"name":"../ThemeProvider","loc":{"line":10,"column":26,"index":572},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\ThemeProvider\\index.js"},{"name":"./getInitColorSchemeScript","loc":{"line":11,"column":126,"index":718},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\getInitColorSchemeScript.js"},{"name":"./useCurrentColorScheme","loc":{"line":12,"column":34,"index":782},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\useCurrentColorScheme.js"},{"name":"react/jsx-runtime","loc":{"line":14,"column":30,"index":888},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\cssVars\\createCssVarsProvider.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react\\jsx-runtime.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DISABLE_CSS_TRANSITION = void 0;\nexports.default = createCssVarsProvider;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _styledEngine = require(\"@mui/styled-engine\");\n\nvar _privateTheming = require(\"@mui/private-theming\");\n\nvar _ThemeProvider = _interopRequireDefault(require(\"../ThemeProvider\"));\n\nvar _getInitColorSchemeScript = _interopRequireWildcard(require(\"./getInitColorSchemeScript\"));\n\nvar _useCurrentColorScheme = _interopRequireDefault(require(\"./useCurrentColorScheme\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nconst DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexports.DISABLE_CSS_TRANSITION = DISABLE_CSS_TRANSITION;\n\nfunction createCssVarsProvider(options) {\n  const {\n    themeId,\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(\"development\" !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : (0, _utils.formatMuiErrorMessage)(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref2) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = _ref2;\n    const hasMounted = React.useRef(false);\n    const upperTheme = (0, _privateTheming.useTheme)();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n\n    const _ref = scopedTheme || themeProp,\n          {\n      colorSchemes = {},\n      components = {},\n      generateCssVars = () => ({\n        vars: {},\n        css: {}\n      }),\n      cssVarPrefix\n    } = _ref,\n          restThemeProp = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = (0, _useCurrentColorScheme.default)({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      } // This scope occurs on the server\n\n\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n\n      return defaultMode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars(); // 3. Start composing the theme object\n\n    const theme = (0, _extends2.default)({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref3 => {\n      let [key, scheme] = _ref3;\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = (0, _utils.deepmerge)(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = (0, _extends2.default)({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = (0, _utils.deepmerge)(theme.vars, rootVars); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    const element = /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {\n        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ThemeProvider.default, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  \"development\" !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: _propTypes.default.string,\n\n    /**\n     * The component tree.\n     */\n    children: _propTypes.default.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: _propTypes.default.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: _propTypes.default.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: _propTypes.default.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: _propTypes.default.string,\n\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: _propTypes.default.bool,\n\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: _propTypes.default.bool,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: _propTypes.default.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: _propTypes.default.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: _propTypes.default.string,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: _propTypes.default.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: _propTypes.default.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => (0, _getInitColorSchemeScript.default)((0, _extends2.default)({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"},"sourceMaps":null,"error":null,"hash":"633701be1949776083a9970822fda673","cacheData":{"env":{"NODE_ENV":"development"}}}
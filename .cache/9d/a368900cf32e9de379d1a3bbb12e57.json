{"id":"../node_modules/engine.io-parser/build/esm/decodePacket.browser.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\package.json","includedInParent":true,"mtime":1685547243420},{"name":"./commons.js","loc":{"line":1,"column":51,"index":51},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\decodePacket.browser.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\commons.js"},{"name":"./contrib/base64-arraybuffer.js","loc":{"line":2,"column":23,"index":90},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\decodePacket.browser.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\contrib\\base64-arraybuffer.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _commons = require(\"./commons.js\");\n\nvar _base64Arraybuffer = require(\"./contrib/base64-arraybuffer.js\");\n\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n\nconst decodePacket = (encodedPacket, binaryType) => {\n  if (typeof encodedPacket !== \"string\") {\n    return {\n      type: \"message\",\n      data: mapBinary(encodedPacket, binaryType)\n    };\n  }\n\n  const type = encodedPacket.charAt(0);\n\n  if (type === \"b\") {\n    return {\n      type: \"message\",\n      data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n    };\n  }\n\n  const packetType = _commons.PACKET_TYPES_REVERSE[type];\n\n  if (!packetType) {\n    return _commons.ERROR_PACKET;\n  }\n\n  return encodedPacket.length > 1 ? {\n    type: _commons.PACKET_TYPES_REVERSE[type],\n    data: encodedPacket.substring(1)\n  } : {\n    type: _commons.PACKET_TYPES_REVERSE[type]\n  };\n};\n\nconst decodeBase64Packet = (data, binaryType) => {\n  if (withNativeArrayBuffer) {\n    const decoded = (0, _base64Arraybuffer.decode)(data);\n    return mapBinary(decoded, binaryType);\n  } else {\n    return {\n      base64: true,\n      data\n    }; // fallback for old browsers\n  }\n};\n\nconst mapBinary = (data, binaryType) => {\n  switch (binaryType) {\n    case \"blob\":\n      return data instanceof ArrayBuffer ? new Blob([data]) : data;\n\n    case \"arraybuffer\":\n    default:\n      return data;\n    // assuming the data is already an ArrayBuffer\n  }\n};\n\nvar _default = decodePacket;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"c96e0eda95f3278be377a479f018343e","cacheData":{"env":{}}}
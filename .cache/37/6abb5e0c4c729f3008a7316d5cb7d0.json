{"id":"../node_modules/react-router-dom/index.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-router-dom\\package.json","includedInParent":true,"mtime":1685047688986},{"name":"react","loc":{"line":11,"column":99,"index":325},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-router-dom\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react\\index.js"},{"name":"history","loc":{"line":12,"column":56,"index":390},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-router-dom\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\history\\index.js"},{"name":"react-router","loc":{"line":14,"column":424,"index":928},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-router-dom\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-router\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserRouter = BrowserRouter;\nexports.HashRouter = HashRouter;\nexports.Link = void 0;\nObject.defineProperty(exports, \"MemoryRouter\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.MemoryRouter;\n  }\n});\nexports.NavLink = void 0;\nObject.defineProperty(exports, \"Navigate\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.Navigate;\n  }\n});\nObject.defineProperty(exports, \"NavigationType\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.NavigationType;\n  }\n});\nObject.defineProperty(exports, \"Outlet\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.Outlet;\n  }\n});\nObject.defineProperty(exports, \"Route\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.Route;\n  }\n});\nObject.defineProperty(exports, \"Router\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.Router;\n  }\n});\nObject.defineProperty(exports, \"Routes\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.Routes;\n  }\n});\nObject.defineProperty(exports, \"UNSAFE_LocationContext\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.UNSAFE_LocationContext;\n  }\n});\nObject.defineProperty(exports, \"UNSAFE_NavigationContext\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.UNSAFE_NavigationContext;\n  }\n});\nObject.defineProperty(exports, \"UNSAFE_RouteContext\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.UNSAFE_RouteContext;\n  }\n});\nObject.defineProperty(exports, \"createPath\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.createPath;\n  }\n});\nObject.defineProperty(exports, \"createRoutesFromChildren\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.createRoutesFromChildren;\n  }\n});\nexports.createSearchParams = createSearchParams;\nObject.defineProperty(exports, \"generatePath\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.generatePath;\n  }\n});\nObject.defineProperty(exports, \"matchPath\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.matchPath;\n  }\n});\nObject.defineProperty(exports, \"matchRoutes\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.matchRoutes;\n  }\n});\nObject.defineProperty(exports, \"parsePath\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.parsePath;\n  }\n});\nObject.defineProperty(exports, \"renderMatches\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.renderMatches;\n  }\n});\nObject.defineProperty(exports, \"resolvePath\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.resolvePath;\n  }\n});\nexports.unstable_HistoryRouter = HistoryRouter;\nObject.defineProperty(exports, \"useHref\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useHref;\n  }\n});\nObject.defineProperty(exports, \"useInRouterContext\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useInRouterContext;\n  }\n});\nexports.useLinkClickHandler = useLinkClickHandler;\nObject.defineProperty(exports, \"useLocation\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useLocation;\n  }\n});\nObject.defineProperty(exports, \"useMatch\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useMatch;\n  }\n});\nObject.defineProperty(exports, \"useNavigate\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useNavigate;\n  }\n});\nObject.defineProperty(exports, \"useNavigationType\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useNavigationType;\n  }\n});\nObject.defineProperty(exports, \"useOutlet\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useOutlet;\n  }\n});\nObject.defineProperty(exports, \"useOutletContext\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useOutletContext;\n  }\n});\nObject.defineProperty(exports, \"useParams\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useParams;\n  }\n});\nObject.defineProperty(exports, \"useResolvedPath\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useResolvedPath;\n  }\n});\nObject.defineProperty(exports, \"useRoutes\", {\n  enumerable: true,\n  get: function () {\n    return _reactRouter.useRoutes;\n  }\n});\nexports.useSearchParams = useSearchParams;\n\nvar _react = require(\"react\");\n\nvar _history = require(\"history\");\n\nvar _reactRouter = require(\"react-router\");\n\n/**\n * React Router DOM v6.3.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst _excluded = [\"onClick\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\"],\n      _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"children\"];\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n} ////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\n\n\nfunction BrowserRouter(_ref) {\n  let {\n    basename,\n    children,\n    window\n  } = _ref;\n  let historyRef = (0, _react.useRef)();\n\n  if (historyRef.current == null) {\n    historyRef.current = (0, _history.createBrowserHistory)({\n      window\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = (0, _react.useState)({\n    action: history.action,\n    location: history.location\n  });\n  (0, _react.useLayoutEffect)(() => history.listen(setState), [history]);\n  return /*#__PURE__*/(0, _react.createElement)(_reactRouter.Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\n\n\nfunction HashRouter(_ref2) {\n  let {\n    basename,\n    children,\n    window\n  } = _ref2;\n  let historyRef = (0, _react.useRef)();\n\n  if (historyRef.current == null) {\n    historyRef.current = (0, _history.createHashHistory)({\n      window\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = (0, _react.useState)({\n    action: history.action,\n    location: history.location\n  });\n  (0, _react.useLayoutEffect)(() => history.listen(setState), [history]);\n  return /*#__PURE__*/(0, _react.createElement)(_reactRouter.Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\n\n\nfunction HistoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    history\n  } = _ref3;\n  const [state, setState] = (0, _react.useState)({\n    action: history.action,\n    location: history.location\n  });\n  (0, _react.useLayoutEffect)(() => history.listen(setState), [history]);\n  return /*#__PURE__*/(0, _react.createElement)(_reactRouter.Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\nif (\"development\" !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nconst Link = /*#__PURE__*/(0, _react.forwardRef)(function LinkWithRef(_ref4, ref) {\n  let {\n    onClick,\n    reloadDocument,\n    replace = false,\n    state,\n    target,\n    to\n  } = _ref4,\n      rest = _objectWithoutPropertiesLoose(_ref4, _excluded);\n\n  let href = (0, _reactRouter.useHref)(to);\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target\n  });\n\n  function handleClick(event) {\n    if (onClick) onClick(event);\n\n    if (!event.defaultPrevented && !reloadDocument) {\n      internalOnClick(event);\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    (0, _react.createElement)(\"a\", _extends({}, rest, {\n      href: href,\n      onClick: handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nexports.Link = Link;\n\nif (\"development\" !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nconst NavLink = /*#__PURE__*/(0, _react.forwardRef)(function NavLinkWithRef(_ref5, ref) {\n  let {\n    \"aria-current\": ariaCurrentProp = \"page\",\n    caseSensitive = false,\n    className: classNameProp = \"\",\n    end = false,\n    style: styleProp,\n    to,\n    children\n  } = _ref5,\n      rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);\n\n  let location = (0, _reactRouter.useLocation)();\n  let path = (0, _reactRouter.useResolvedPath)(to);\n  let locationPathname = location.pathname;\n  let toPathname = path.pathname;\n\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    toPathname = toPathname.toLowerCase();\n  }\n\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp({\n      isActive\n    });\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null].filter(Boolean).join(\" \");\n  }\n\n  let style = typeof styleProp === \"function\" ? styleProp({\n    isActive\n  }) : styleProp;\n  return /*#__PURE__*/(0, _react.createElement)(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to\n  }), typeof children === \"function\" ? children({\n    isActive\n  }) : children);\n});\nexports.NavLink = NavLink;\n\nif (\"development\" !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n} ////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\n\n\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = (0, _reactRouter.useNavigate)();\n  let location = (0, _reactRouter.useLocation)();\n  let path = (0, _reactRouter.useResolvedPath)(to);\n  return (0, _react.useCallback)(event => {\n    if (event.button === 0 && ( // Ignore everything but left clicks\n    !target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n    ) {\n      event.preventDefault(); // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here.\n\n      let replace = !!replaceProp || (0, _reactRouter.createPath)(location) === (0, _reactRouter.createPath)(path);\n      navigate(to, {\n        replace,\n        state\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\n\n\nfunction useSearchParams(defaultInit) {\n  \"development\" !== \"production\" ? warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = (0, _react.useRef)(createSearchParams(defaultInit));\n  let location = (0, _reactRouter.useLocation)();\n  let searchParams = (0, _react.useMemo)(() => {\n    let searchParams = createSearchParams(location.search);\n\n    for (let key of defaultSearchParamsRef.current.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n\n    return searchParams;\n  }, [location.search]);\n  let navigate = (0, _reactRouter.useNavigate)();\n  let setSearchParams = (0, _react.useCallback)((nextInit, navigateOptions) => {\n    navigate(\"?\" + createSearchParams(nextInit), navigateOptions);\n  }, [navigate]);\n  return [searchParams, setSearchParams];\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\n\n\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}"},"sourceMaps":null,"error":null,"hash":"f7db2c70358a38780cbd7a1eb450fbc2","cacheData":{"env":{"NODE_ENV":"development"}}}
{"id":"../node_modules/@mui/material/styles/adaptV4Theme.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\material\\styles\\package.json","includedInParent":true,"mtime":1685847523333},{"name":"@babel/runtime/helpers/esm/extends","loc":{"line":1,"column":21,"index":21},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\material\\styles\\adaptV4Theme.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@babel\\runtime\\helpers\\esm\\extends.js"},{"name":"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose","loc":{"line":2,"column":42,"index":101},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\material\\styles\\adaptV4Theme.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@babel\\runtime\\helpers\\esm\\objectWithoutPropertiesLoose.js"},{"name":"@mui/system","loc":{"line":5,"column":49,"index":339},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\material\\styles\\adaptV4Theme.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = adaptV4Theme;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\"));\n\nvar _system = require(\"@mui/system\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst _excluded = [\"defaultProps\", \"mixins\", \"overrides\", \"palette\", \"props\", \"styleOverrides\"],\n      _excluded2 = [\"type\", \"mode\"];\n\nfunction adaptV4Theme(inputTheme) {\n  if (\"development\" !== 'production') {\n    console.warn(['MUI: adaptV4Theme() is deprecated.', 'Follow the upgrade guide on https://mui.com/r/migration-v4#theme.'].join('\\n'));\n  }\n\n  const {\n    defaultProps = {},\n    mixins = {},\n    overrides = {},\n    palette = {},\n    props = {},\n    styleOverrides = {}\n  } = inputTheme,\n        other = (0, _objectWithoutPropertiesLoose2.default)(inputTheme, _excluded);\n  const theme = (0, _extends2.default)({}, other, {\n    components: {}\n  }); // default props\n\n  Object.keys(defaultProps).forEach(component => {\n    const componentValue = theme.components[component] || {};\n    componentValue.defaultProps = defaultProps[component];\n    theme.components[component] = componentValue;\n  });\n  Object.keys(props).forEach(component => {\n    const componentValue = theme.components[component] || {};\n    componentValue.defaultProps = props[component];\n    theme.components[component] = componentValue;\n  }); // CSS overrides\n\n  Object.keys(styleOverrides).forEach(component => {\n    const componentValue = theme.components[component] || {};\n    componentValue.styleOverrides = styleOverrides[component];\n    theme.components[component] = componentValue;\n  });\n  Object.keys(overrides).forEach(component => {\n    const componentValue = theme.components[component] || {};\n    componentValue.styleOverrides = overrides[component];\n    theme.components[component] = componentValue;\n  }); // theme.spacing\n\n  theme.spacing = (0, _system.createSpacing)(inputTheme.spacing); // theme.mixins.gutters\n\n  const breakpoints = (0, _system.createBreakpoints)(inputTheme.breakpoints || {});\n  const spacing = theme.spacing;\n  theme.mixins = (0, _extends2.default)({\n    gutters: (styles = {}) => {\n      return (0, _extends2.default)({\n        paddingLeft: spacing(2),\n        paddingRight: spacing(2)\n      }, styles, {\n        [breakpoints.up('sm')]: (0, _extends2.default)({\n          paddingLeft: spacing(3),\n          paddingRight: spacing(3)\n        }, styles[breakpoints.up('sm')])\n      });\n    }\n  }, mixins);\n  const {\n    type: typeInput,\n    mode: modeInput\n  } = palette,\n        paletteRest = (0, _objectWithoutPropertiesLoose2.default)(palette, _excluded2);\n  const finalMode = modeInput || typeInput || 'light';\n  theme.palette = (0, _extends2.default)({\n    // theme.palette.text.hint\n    text: {\n      hint: finalMode === 'dark' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(0, 0, 0, 0.38)'\n    },\n    mode: finalMode,\n    type: finalMode\n  }, paletteRest);\n  return theme;\n}"},"sourceMaps":null,"error":null,"hash":"ecfdd4dd985943bfdb42a9ec328310dd","cacheData":{"env":{"NODE_ENV":"development"}}}
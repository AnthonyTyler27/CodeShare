{"id":"../node_modules/engine.io-client/build/esm/transport.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\package.json","includedInParent":true,"mtime":1685547244006},{"name":"engine.io-parser","loc":{"line":1,"column":29,"index":29},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transport.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\index.js"},{"name":"@socket.io/component-emitter","loc":{"line":2,"column":24,"index":73},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transport.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@socket.io\\component-emitter\\index.mjs"},{"name":"./util.js","loc":{"line":3,"column":38,"index":143},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transport.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transport = void 0;\n\nvar _engine = require(\"engine.io-parser\");\n\nvar _componentEmitter = require(\"@socket.io/component-emitter\");\n\nvar _util = require(\"./util.js\");\n\nclass TransportError extends Error {\n  constructor(reason, description, context) {\n    super(reason);\n    this.description = description;\n    this.context = context;\n    this.type = \"TransportError\";\n  }\n\n}\n\nclass Transport extends _componentEmitter.Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} opts - options\n   * @protected\n   */\n  constructor(opts) {\n    super();\n    this.writable = false;\n    (0, _util.installTimerFunctions)(this, opts);\n    this.opts = opts;\n    this.query = opts.query;\n    this.socket = opts.socket;\n  }\n  /**\n   * Emits an error.\n   *\n   * @param {String} reason\n   * @param description\n   * @param context - the error context\n   * @return {Transport} for chaining\n   * @protected\n   */\n\n\n  onError(reason, description, context) {\n    super.emitReserved(\"error\", new TransportError(reason, description, context));\n    return this;\n  }\n  /**\n   * Opens the transport.\n   */\n\n\n  open() {\n    this.readyState = \"opening\";\n    this.doOpen();\n    return this;\n  }\n  /**\n   * Closes the transport.\n   */\n\n\n  close() {\n    if (this.readyState === \"opening\" || this.readyState === \"open\") {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   */\n\n\n  send(packets) {\n    if (this.readyState === \"open\") {\n      this.write(packets);\n    } else {// this might happen if the transport was silently closed in the beforeunload event handler\n    }\n  }\n  /**\n   * Called upon open\n   *\n   * @protected\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    super.emitReserved(\"open\");\n  }\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @protected\n   */\n\n\n  onData(data) {\n    const packet = (0, _engine.decodePacket)(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  /**\n   * Called with a decoded packet.\n   *\n   * @protected\n   */\n\n\n  onPacket(packet) {\n    super.emitReserved(\"packet\", packet);\n  }\n  /**\n   * Called upon close.\n   *\n   * @protected\n   */\n\n\n  onClose(details) {\n    this.readyState = \"closed\";\n    super.emitReserved(\"close\", details);\n  }\n  /**\n   * Pauses the transport, in order not to lose packets during an upgrade.\n   *\n   * @param onPause\n   */\n\n\n  pause(onPause) {}\n\n}\n\nexports.Transport = Transport;"},"sourceMaps":null,"error":null,"hash":"5dffe30aee64cb41ceb6dd83a12473fd","cacheData":{"env":{}}}
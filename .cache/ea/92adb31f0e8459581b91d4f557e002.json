{"id":"../node_modules/@mui/base/useList/useListChangeNotifiers.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\base\\useList\\package.json","includedInParent":true,"mtime":1685847519020},{"name":"react","loc":{"line":1,"column":23,"index":23},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\base\\useList\\useListChangeNotifiers.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react\\index.js"},{"name":"../utils/useMessageBus","loc":{"line":2,"column":26,"index":58},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\base\\useList\\useListChangeNotifiers.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\base\\utils\\useMessageBus.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useSelectChangeNotifiers;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useMessageBus = _interopRequireDefault(require(\"../utils/useMessageBus\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst SELECTION_CHANGE_TOPIC = 'select:change-selection';\nconst HIGHLIGHT_CHANGE_TOPIC = 'select:change-highlight';\n/**\n * @ignore - internal hook.\n *\n * This hook is used to notify any interested components about changes in the Select's selection and highlight.\n */\n\nfunction useSelectChangeNotifiers() {\n  const messageBus = (0, _useMessageBus.default)();\n  const notifySelectionChanged = React.useCallback(newSelectedItems => {\n    messageBus.publish(SELECTION_CHANGE_TOPIC, newSelectedItems);\n  }, [messageBus]);\n  const notifyHighlightChanged = React.useCallback(newHighlightedItem => {\n    messageBus.publish(HIGHLIGHT_CHANGE_TOPIC, newHighlightedItem);\n  }, [messageBus]);\n  const registerSelectionChangeHandler = React.useCallback(handler => {\n    return messageBus.subscribe(SELECTION_CHANGE_TOPIC, handler);\n  }, [messageBus]);\n  const registerHighlightChangeHandler = React.useCallback(handler => {\n    return messageBus.subscribe(HIGHLIGHT_CHANGE_TOPIC, handler);\n  }, [messageBus]);\n  return {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerSelectionChangeHandler,\n    registerHighlightChangeHandler\n  };\n}"},"sourceMaps":null,"error":null,"hash":"6809d963edc44474d1a9ed19253f7594","cacheData":{"env":{}}}
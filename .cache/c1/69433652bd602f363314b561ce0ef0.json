{"id":"components/Editor.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"react","loc":{"line":1,"column":41,"index":41},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react\\index.js"},{"name":"codemirror","loc":{"line":3,"column":23,"index":76},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\codemirror\\lib\\codemirror.js"},{"name":"react-hot-toast","loc":{"line":4,"column":18,"index":109},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-hot-toast\\dist\\react-hot-toast.esm.js"},{"name":"codemirror/lib/codemirror.css","loc":{"line":6,"column":7,"index":138},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\codemirror\\lib\\codemirror.css"},{"name":"codemirror/theme/monokai.css","loc":{"line":7,"column":7,"index":179},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\codemirror\\theme\\monokai.css"},{"name":"codemirror/theme/neat.css","loc":{"line":8,"column":7,"index":219},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\codemirror\\theme\\neat.css"},{"name":"codemirror/mode/clike/clike","loc":{"line":10,"column":7,"index":308},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\codemirror\\mode\\clike\\clike.js"},{"name":"codemirror/addon/edit/closetag","loc":{"line":11,"column":7,"index":347},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\codemirror\\addon\\edit\\closetag.js"},{"name":"codemirror/addon/edit/closebrackets","loc":{"line":12,"column":7,"index":389},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\codemirror\\addon\\edit\\closebrackets.js"},{"name":"../server/Actions","loc":{"line":13,"column":20,"index":449},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\src\\server\\Actions.js"},{"name":"../server/Posts","loc":{"line":14,"column":18,"index":489},"parent":"C:\\Users\\Dell\\CodeShare\\src\\components\\Editor.js","resolved":"C:\\Users\\Dell\\CodeShare\\src\\server\\Posts.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _reactHotToast = _interopRequireDefault(require(\"react-hot-toast\"));\n\nrequire(\"codemirror/lib/codemirror.css\");\n\nrequire(\"codemirror/theme/monokai.css\");\n\nrequire(\"codemirror/theme/neat.css\");\n\nrequire(\"codemirror/mode/clike/clike\");\n\nrequire(\"codemirror/addon/edit/closetag\");\n\nrequire(\"codemirror/addon/edit/closebrackets\");\n\nvar _Actions = _interopRequireDefault(require(\"../server/Actions\"));\n\nvar _Posts = _interopRequireDefault(require(\"../server/Posts\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n// import 'codemirror/mode/javascript/javascript';\nvar delay;\n\nconst Editor = _ref => {\n  let {\n    socketRef,\n    roomId,\n    onCodeChange\n  } = _ref;\n  const editorRef = (0, _react.useRef)(null);\n  (0, _react.useEffect)(() => {\n    async function init() {\n      editorRef.current = _codemirror.default.fromTextArea(document.getElementById('realtimeEditor'), {\n        mode: {\n          name: 'text/x-java'\n        },\n        theme: 'neat',\n        autoCloseTags: true,\n        autoCloseBrackets: true,\n        lineNumbers: true,\n        lineWrapping: true,\n        readOnly: true\n      });\n      editorRef.current.setSize(\"100%\", \"100%\"); // Now, we get the file from the server. \n\n      getFileFromServer(editorRef);\n      editorRef.current.on('change', (instance, changes) => {\n        // This will update the server copy of the code 1 second after\n        // the user stops typing.  Might be able to increase this. \n        clearTimeout(delay);\n        delay = setTimeout(updateCodeOnServer, 1000, instance.getValue());\n        const {\n          origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n\n        if (origin !== 'setValue') {\n          socketRef.current.emit(_Actions.default.CODE_CHANGE, {\n            roomId,\n            code\n          });\n        }\n      });\n    }\n\n    init();\n  }, []);\n  (0, _react.useEffect)(() => {\n    if (socketRef.current) {\n      socketRef.current.on(_Actions.default.CODE_CHANGE, _ref2 => {\n        let {\n          code\n        } = _ref2;\n\n        if (code !== null) {\n          editorRef.current.setValue(code);\n        }\n      });\n    }\n\n    return () => {\n      socketRef.current.off(_Actions.default.CODE_CHANGE);\n    };\n  }, [socketRef.current]);\n  return /*#__PURE__*/_react.default.createElement(\"textarea\", {\n    id: \"realtimeEditor\"\n  });\n};\n/*\r\nThis function asks for the current file from the server. \r\n*/\n\n\nasync function getFileFromServer(editorRef) {\n  await fetch(_Posts.default.GETSOURCEFILE, {\n    method: 'POST'\n  }).then(response => response.json()).then(data => {\n    // do something with the retrieved data \n    editorRef.current.setValue(data.text); // now, the user can edit this\n\n    editorRef.current.setOption('readOnly', false);\n  }).catch(error => {\n    console.error(\"Server error! Attempt to get the file failed.\");\n\n    _reactHotToast.default.error(\"Temporary Server Error\");\n  });\n}\n\nfunction updateCodeOnServer(data) {\n  console.log(\"Sending code to server.\");\n  fetch(_Posts.default.SENDSOURCEFILE, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // convert code area text to JSON and encode in base64.\n    body: JSON.stringify({\n      text: btoa(data)\n    })\n  });\n}\n\nvar _default = Editor;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"c2a8d5b59fa436d8c15d8b908098cdde","cacheData":{"env":{}}}
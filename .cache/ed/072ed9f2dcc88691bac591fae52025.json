{"id":"../node_modules/engine.io-client/build/esm/transports/websocket.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\package.json","includedInParent":true,"mtime":1685547244006},{"name":"../transport.js","loc":{"line":1,"column":26,"index":26},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transports\\websocket.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transport.js"},{"name":"../contrib/parseqs.js","loc":{"line":2,"column":23,"index":68},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transports\\websocket.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\contrib\\parseqs.js"},{"name":"../contrib/yeast.js","loc":{"line":3,"column":22,"index":115},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transports\\websocket.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\contrib\\yeast.js"},{"name":"../util.js","loc":{"line":4,"column":21,"index":159},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transports\\websocket.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\util.js"},{"name":"./websocket-constructor.js","loc":{"line":5,"column":79,"index":252},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transports\\websocket.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transports\\websocket-constructor.browser.js"},{"name":"engine.io-parser","loc":{"line":6,"column":29,"index":311},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transports\\websocket.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\index.js"},{"name":"buffer","parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\transports\\websocket.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\node-libs-browser\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WS = void 0;\n\nvar _transport = require(\"../transport.js\");\n\nvar _parseqs = require(\"../contrib/parseqs.js\");\n\nvar _yeast = require(\"../contrib/yeast.js\");\n\nvar _util = require(\"../util.js\");\n\nvar _websocketConstructor = require(\"./websocket-constructor.js\");\n\nvar _engine = require(\"engine.io-parser\");\n\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\n\nclass WS extends _transport.Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @param {Object} opts - connection options\n   * @protected\n   */\n  constructor(opts) {\n    super(opts);\n    this.supportsBinary = !opts.forceBase64;\n  }\n\n  get name() {\n    return \"websocket\";\n  }\n\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n    const opts = isReactNative ? {} : (0, _util.pick)(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws = _websocketConstructor.usingBrowserWebSocket && !isReactNative ? protocols ? new _websocketConstructor.WebSocket(uri, protocols) : new _websocketConstructor.WebSocket(uri) : new _websocketConstructor.WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emitReserved(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType || _websocketConstructor.defaultBinaryType;\n    this.addEventListeners();\n  }\n  /**\n   * Adds event listeners to the socket\n   *\n   * @private\n   */\n\n\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n\n      this.onOpen();\n    };\n\n    this.ws.onclose = closeEvent => this.onClose({\n      description: \"websocket connection closed\",\n      context: closeEvent\n    });\n\n    this.ws.onmessage = ev => this.onData(ev.data);\n\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n\n  write(packets) {\n    this.writable = false; // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      (0, _engine.encodePacket)(packet, this.supportsBinary, data => {\n        // always create a new object (GH-437)\n        const opts = {};\n\n        if (!_websocketConstructor.usingBrowserWebSocket) {\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (this.opts.perMessageDeflate) {\n            const len = // @ts-ignore\n            \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n            if (len < this.opts.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        } // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n\n\n        try {\n          if (_websocketConstructor.usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            this.ws.send(data);\n          } else {\n            this.ws.send(data, opts);\n          }\n        } catch (e) {}\n\n        if (lastPacket) {\n          // fake drain\n          // defer to next tick to allow Socket to clear writeBuffer\n          (0, _websocketConstructor.nextTick)(() => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @private\n   */\n\n\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\"; // avoid port if default for schema\n\n    if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    } // append timestamp to URI\n\n\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = (0, _yeast.yeast)();\n    } // communicate binary support capabilities\n\n\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    const encodedQuery = (0, _parseqs.encode)(query);\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n  }\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @private\n   */\n\n\n  check() {\n    return !!_websocketConstructor.WebSocket;\n  }\n\n}\n\nexports.WS = WS;"},"sourceMaps":null,"error":null,"hash":"5a5c384bf43458f0e4aa505ba3e21bdd","cacheData":{"env":{}}}
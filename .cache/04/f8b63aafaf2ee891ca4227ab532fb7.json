{"id":"../node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\package.json","includedInParent":true,"mtime":1685847516748},{"name":"@mui/utils","loc":{"line":1,"column":50,"index":50},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\styleFunctionSx\\styleFunctionSx.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\utils\\esm\\index.js"},{"name":"../merge","loc":{"line":2,"column":18,"index":82},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\styleFunctionSx\\styleFunctionSx.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\merge.js"},{"name":"../style","loc":{"line":3,"column":51,"index":145},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\styleFunctionSx\\styleFunctionSx.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\style.js"},{"name":"../breakpoints","loc":{"line":4,"column":88,"index":245},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\styleFunctionSx\\styleFunctionSx.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\breakpoints.js"},{"name":"./defaultSxConfig","loc":{"line":5,"column":28,"index":291},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\styleFunctionSx\\styleFunctionSx.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\system\\esm\\styleFunctionSx\\defaultSxConfig.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx;\n\nvar _utils = require(\"@mui/utils\");\n\nvar _merge = _interopRequireDefault(require(\"../merge\"));\n\nvar _style = require(\"../style\");\n\nvar _breakpoints = require(\"../breakpoints\");\n\nvar _defaultSxConfig = _interopRequireDefault(require(\"./defaultSxConfig\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction objectsHaveSameKeys() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}\n\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n} // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\nfunction unstable_createStyleFunctionSx() {\n  function getThemeValue(prop, val, theme, config) {\n    const props = {\n      [prop]: val,\n      theme\n    };\n    const options = config[prop];\n\n    if (!options) {\n      return {\n        [prop]: val\n      };\n    }\n\n    const {\n      cssProperty = prop,\n      themeKey,\n      transform,\n      style\n    } = options;\n\n    if (val == null) {\n      return null;\n    }\n\n    if (themeKey === 'typography' && val === 'inherit') {\n      return {\n        [prop]: val\n      };\n    }\n\n    const themeMapping = (0, _style.getPath)(theme, themeKey) || {};\n\n    if (style) {\n      return style(props);\n    }\n\n    const styleFromPropValue = propValueFinal => {\n      let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);\n\n      if (propValueFinal === value && typeof propValueFinal === 'string') {\n        // Haven't found value\n        value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : (0, _utils.unstable_capitalize)(propValueFinal)}`, propValueFinal);\n      }\n\n      if (cssProperty === false) {\n        return value;\n      }\n\n      return {\n        [cssProperty]: value\n      };\n    };\n\n    return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);\n  }\n\n  function styleFunctionSx(props) {\n    var _theme$unstable_sxCon;\n\n    const {\n      sx,\n      theme = {}\n    } = props || {};\n\n    if (!sx) {\n      return null; // Emotion & styled-components will neglect null\n    }\n\n    const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : _defaultSxConfig.default;\n    /*\n     * Receive `sxInput` as object or callback\n     * and then recursively check keys & values to create media query object styles.\n     * (the result will be used in `styled`)\n     */\n\n    function traverse(sxInput) {\n      let sxObject = sxInput;\n\n      if (typeof sxInput === 'function') {\n        sxObject = sxInput(theme);\n      } else if (typeof sxInput !== 'object') {\n        // value\n        return sxInput;\n      }\n\n      if (!sxObject) {\n        return null;\n      }\n\n      const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);\n      const breakpointsKeys = Object.keys(emptyBreakpoints);\n      let css = emptyBreakpoints;\n      Object.keys(sxObject).forEach(styleKey => {\n        const value = callIfFn(sxObject[styleKey], theme);\n\n        if (value !== null && value !== undefined) {\n          if (typeof value === 'object') {\n            if (config[styleKey]) {\n              css = (0, _merge.default)(css, getThemeValue(styleKey, value, theme, config));\n            } else {\n              const breakpointsValues = (0, _breakpoints.handleBreakpoints)({\n                theme\n              }, value, x => ({\n                [styleKey]: x\n              }));\n\n              if (objectsHaveSameKeys(breakpointsValues, value)) {\n                css[styleKey] = styleFunctionSx({\n                  sx: value,\n                  theme\n                });\n              } else {\n                css = (0, _merge.default)(css, breakpointsValues);\n              }\n            }\n          } else {\n            css = (0, _merge.default)(css, getThemeValue(styleKey, value, theme, config));\n          }\n        }\n      });\n      return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css);\n    }\n\n    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);\n  }\n\n  return styleFunctionSx;\n}\n\nconst styleFunctionSx = unstable_createStyleFunctionSx();\nstyleFunctionSx.filterProps = ['sx'];\nvar _default = styleFunctionSx;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"eb996850b45a158c884ee49a6e85cb91","cacheData":{"env":{}}}
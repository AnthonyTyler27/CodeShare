{"id":"../node_modules/engine.io-client/build/esm/util.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\package.json","includedInParent":true,"mtime":1685547244006},{"name":"./globalThis.js","loc":{"line":1,"column":45,"index":45},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\util.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-client\\build\\esm\\globalThis.browser.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.byteLength = byteLength;\nexports.installTimerFunctions = installTimerFunctions;\nexports.pick = pick;\n\nvar _globalThis = require(\"./globalThis.js\");\n\nfunction pick(obj, ...attr) {\n  return attr.reduce((acc, k) => {\n    if (obj.hasOwnProperty(k)) {\n      acc[k] = obj[k];\n    }\n\n    return acc;\n  }, {});\n} // Keep a reference to the real timeout functions so they can be used when overridden\n\n\nconst NATIVE_SET_TIMEOUT = _globalThis.globalThisShim.setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = _globalThis.globalThisShim.clearTimeout;\n\nfunction installTimerFunctions(obj, opts) {\n  if (opts.useNativeTimers) {\n    obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(_globalThis.globalThisShim);\n    obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(_globalThis.globalThisShim);\n  } else {\n    obj.setTimeoutFn = _globalThis.globalThisShim.setTimeout.bind(_globalThis.globalThisShim);\n    obj.clearTimeoutFn = _globalThis.globalThisShim.clearTimeout.bind(_globalThis.globalThisShim);\n  }\n} // base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\n\n\nconst BASE64_OVERHEAD = 1.33; // we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\n\nfunction byteLength(obj) {\n  if (typeof obj === \"string\") {\n    return utf8Length(obj);\n  } // arraybuffer or blob\n\n\n  return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\n\nfunction utf8Length(str) {\n  let c = 0,\n      length = 0;\n\n  for (let i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      length += 1;\n    } else if (c < 0x800) {\n      length += 2;\n    } else if (c < 0xd800 || c >= 0xe000) {\n      length += 3;\n    } else {\n      i++;\n      length += 4;\n    }\n  }\n\n  return length;\n}"},"sourceMaps":null,"error":null,"hash":"fbc17b3ec9619f8ace9a70429146459e","cacheData":{"env":{}}}
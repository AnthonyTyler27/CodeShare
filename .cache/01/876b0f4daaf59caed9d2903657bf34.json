{"id":"../node_modules/react-avatar/es/utils.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-avatar\\package.json","includedInParent":true,"mtime":1685047700984},{"name":"@babel/runtime/helpers/slicedToArray","loc":{"line":3,"column":27,"index":42},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-avatar\\es\\utils.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@babel\\runtime\\helpers\\slicedToArray.js"},{"name":"@babel/runtime/helpers/toConsumableArray","loc":{"line":4,"column":31,"index":113},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-avatar\\es\\utils.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@babel\\runtime\\helpers\\toConsumableArray.js"},{"name":"core-js-pure/stable/instance/map.js","loc":{"line":5,"column":33,"index":190},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-avatar\\es\\utils.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\core-js-pure\\stable\\instance\\map.js"},{"name":"core-js-pure/stable/instance/slice.js","loc":{"line":6,"column":35,"index":264},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-avatar\\es\\utils.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\core-js-pure\\stable\\instance\\slice.js"},{"name":"core-js-pure/stable/instance/filter.js","loc":{"line":7,"column":36,"index":341},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-avatar\\es\\utils.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\core-js-pure\\stable\\instance\\filter.js"},{"name":"is-retina","loc":{"line":8,"column":19,"index":402},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\react-avatar\\es\\utils.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\is-retina\\index.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultColors = void 0;\nexports.defaultInitials = defaultInitials;\nexports.fetch = fetch;\nexports.fetchJSONP = fetchJSONP;\nexports.getImageSize = getImageSize;\nexports.getRandomColor = getRandomColor;\nexports.parseSize = parseSize;\nexports.setGroupedTimeout = setGroupedTimeout;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _map = _interopRequireDefault(require(\"core-js-pure/stable/instance/map.js\"));\n\nvar _slice = _interopRequireDefault(require(\"core-js-pure/stable/instance/slice.js\"));\n\nvar _filter = _interopRequireDefault(require(\"core-js-pure/stable/instance/filter.js\"));\n\nvar _isRetina = _interopRequireDefault(require(\"is-retina\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar IS_RETINA = (0, _isRetina.default)();\n\nfunction fetch(url, successCb, errorCb) {\n  var request = new XMLHttpRequest();\n\n  request.onreadystatechange = function () {\n    if (request.readyState === 4) {\n      if (request.status === 200) {\n        var data = JSON.parse(request.responseText);\n        successCb(data);\n      } else {\n        errorCb(request.status);\n      }\n    }\n  };\n\n  request.open('GET', url, true);\n  request.send();\n}\n\nfunction fetchJSONP(url, successCb, errorCb) {\n  var callbackName = 'jsonp_cb_' + Math.round(100000 * Math.random());\n  var script = document.createElement('script');\n  script.src = url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + callbackName;\n  document.body.appendChild(script);\n\n  script.onerror = function () {\n    errorCb();\n  };\n\n  window[callbackName] = function (data) {\n    delete window[callbackName];\n    document.body.removeChild(script);\n    successCb(data);\n  };\n}\n\nvar defaultColors = ['#d73d32', '#7e3794', '#4285f4', '#67ae3f', '#d61a7f', '#ff4080']; // https://regex101.com/r/YEsPER/1\n// https://developer.mozilla.org/en-US/docs/Web/CSS/length\n\nexports.defaultColors = defaultColors;\nvar reSize = /^([-+]?(?:\\d+(?:\\.\\d+)?|\\.\\d+))([a-z]{2,4}|%)?$/; // https://en.wikipedia.org/wiki/Linear_congruential_generator\n\nfunction _stringAsciiPRNG(value, m) {\n  var _context; // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n\n\n  var charCodes = (0, _map.default)(_context = (0, _toConsumableArray2.default)(value)).call(_context, function (letter) {\n    return letter.charCodeAt(0);\n  });\n  var len = charCodes.length;\n  var a = len % (m - 1) + 1;\n  var c = charCodes.reduce(function (current, next) {\n    return current + next;\n  }) % m;\n  var random = charCodes[0] % m;\n\n  for (var i = 0; i < len; i++) {\n    random = (a * random + c) % m;\n  }\n\n  return random;\n}\n\nfunction getRandomColor(value) {\n  var colors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultColors; // if no value is passed, always return transparent color otherwise\n  // a rerender would show a new color which would will\n  // give strange effects when an interface is loading\n  // and gets rerendered a few consequent times\n\n  if (!value) return 'transparent'; // value based random color index\n  // the reason we don't just use a random number is to make sure that\n  // a certain value will always get the same color assigned given\n  // a fixed set of colors\n\n  var colorIndex = _stringAsciiPRNG(value, colors.length);\n\n  return colors[colorIndex];\n}\n\nfunction parseSize(size) {\n  size = '' + size;\n\n  var _ref = reSize.exec(size) || [],\n      _ref2 = (0, _slicedToArray2.default)(_ref, 3),\n      _ref2$ = _ref2[1],\n      value = _ref2$ === void 0 ? 0 : _ref2$,\n      _ref2$2 = _ref2[2],\n      unit = _ref2$2 === void 0 ? 'px' : _ref2$2;\n\n  return {\n    value: parseFloat(value),\n    str: value + unit,\n    unit: unit\n  };\n}\n/**\n * Calculate absolute size in pixels we want for the images\n * that get requested from the various sources. They don't\n * understand relative sizes like `em` or `vww`.  We select\n * a fixed size of 512px when we can't detect the true pixel size.\n */\n\n\nfunction getImageSize(size) {\n  size = parseSize(size);\n  if (isNaN(size.value)) // invalid size, use fallback\n    size = 512;else if (size.unit === 'px') // px are good, use them\n    size = size.value;else if (size.value === 0) // relative 0 === absolute 0\n    size = 0;else // anything else is unknown, use fallback\n    size = 512;\n  if (IS_RETINA) size = size * 2;\n  return size;\n}\n\nfunction defaultInitials(name, _ref3) {\n  var _context2, _context3, _context4;\n\n  var maxInitials = _ref3.maxInitials;\n  return (0, _slice.default)(_context2 = (0, _filter.default)(_context3 = (0, _map.default)(_context4 = name.split(/\\s/)).call(_context4, function (part) {\n    return part.substring(0, 1).toUpperCase();\n  })).call(_context3, function (v) {\n    return !!v;\n  })).call(_context2, 0, maxInitials).join('').toUpperCase();\n}\n/**\n * Grouped timeouts reduce the amount of timeouts trigged\n * by grouping multiple handlers into a single setTimeout call.\n *\n * This reduces accuracy of the timeout but will be less expensive\n * when multiple avatar have been loaded into view.\n */\n\n\nvar timeoutGroups = {};\n\nfunction setGroupedTimeout(fn, ttl) {\n  if (timeoutGroups[ttl]) {\n    timeoutGroups[ttl].push(fn);\n    return;\n  }\n\n  var callbacks = timeoutGroups[ttl] = [fn];\n  setTimeout(function () {\n    delete timeoutGroups[ttl];\n    callbacks.forEach(function (cb) {\n      return cb();\n    });\n  }, ttl);\n}"},"sourceMaps":null,"error":null,"hash":"204ccde1b7433d538da2b56645009bfa","cacheData":{"env":{}}}
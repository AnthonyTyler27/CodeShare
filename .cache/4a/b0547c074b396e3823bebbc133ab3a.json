{"id":"../node_modules/@mui/utils/esm/getDisplayName.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\utils\\package.json","includedInParent":true,"mtime":1685847515858},{"name":"react-is","loc":{"line":1,"column":33,"index":33},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\utils\\esm\\getDisplayName.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\utils\\node_modules\\react-is\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getDisplayName;\nexports.getFunctionName = getFunctionName;\n\nvar _reactIs = require(\"react-is\");\n\n// Simplified polyfill for IE11 support\n// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3\nconst fnNameMatchRegex = /^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^(\\s/]*)\\s*/;\n\nfunction getFunctionName(fn) {\n  const match = `${fn}`.match(fnNameMatchRegex);\n  const name = match && match[1];\n  return name || '';\n}\n\nfunction getFunctionComponentName(Component) {\n  let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return Component.displayName || Component.name || getFunctionName(Component) || fallback;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  const functionName = getFunctionComponentName(innerType);\n  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);\n}\n/**\n * cherry-pick from\n * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js\n * originally forked from recompose/getDisplayName with added IE11 support\n */\n\n\nfunction getDisplayName(Component) {\n  if (Component == null) {\n    return undefined;\n  }\n\n  if (typeof Component === 'string') {\n    return Component;\n  }\n\n  if (typeof Component === 'function') {\n    return getFunctionComponentName(Component, 'Component');\n  } // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`\n\n\n  if (typeof Component === 'object') {\n    switch (Component.$$typeof) {\n      case _reactIs.ForwardRef:\n        return getWrappedName(Component, Component.render, 'ForwardRef');\n\n      case _reactIs.Memo:\n        return getWrappedName(Component, Component.type, 'memo');\n\n      default:\n        return undefined;\n    }\n  }\n\n  return undefined;\n}"},"sourceMaps":null,"error":null,"hash":"c1fbba02c2b85f9648d0e0e942544be7","cacheData":{"env":{}}}
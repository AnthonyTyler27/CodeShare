{"id":"../node_modules/engine.io-parser/build/esm/index.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\package.json","includedInParent":true,"mtime":1685547243420},{"name":"./encodePacket.js","loc":{"line":1,"column":25,"index":25},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\encodePacket.browser.js"},{"name":"./decodePacket.js","loc":{"line":2,"column":25,"index":71},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\engine.io-parser\\build\\esm\\decodePacket.browser.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"decodePacket\", {\n  enumerable: true,\n  get: function () {\n    return _decodePacket.default;\n  }\n});\nexports.decodePayload = void 0;\nObject.defineProperty(exports, \"encodePacket\", {\n  enumerable: true,\n  get: function () {\n    return _encodePacket.default;\n  }\n});\nexports.protocol = exports.encodePayload = void 0;\n\nvar _encodePacket = _interopRequireDefault(require(\"./encodePacket.js\"));\n\nvar _decodePacket = _interopRequireDefault(require(\"./decodePacket.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n\nconst encodePayload = (packets, callback) => {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  const length = packets.length;\n  const encodedPackets = new Array(length);\n  let count = 0;\n  packets.forEach((packet, i) => {\n    // force base64 encoding for binary packets\n    (0, _encodePacket.default)(packet, false, encodedPacket => {\n      encodedPackets[i] = encodedPacket;\n\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\n\nexports.encodePayload = encodePayload;\n\nconst decodePayload = (encodedPayload, binaryType) => {\n  const encodedPackets = encodedPayload.split(SEPARATOR);\n  const packets = [];\n\n  for (let i = 0; i < encodedPackets.length; i++) {\n    const decodedPacket = (0, _decodePacket.default)(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n\n  return packets;\n};\n\nexports.decodePayload = decodePayload;\nconst protocol = 4;\nexports.protocol = protocol;"},"sourceMaps":null,"error":null,"hash":"fd3e610249713aeb3c1d99c732a99a7a","cacheData":{"env":{}}}
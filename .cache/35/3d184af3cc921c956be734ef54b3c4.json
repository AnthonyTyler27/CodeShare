{"id":"../node_modules/socket.io-client/build/esm/index.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-client\\build\\esm\\package.json","includedInParent":true,"mtime":1685547243678},{"name":"./url.js","loc":{"line":1,"column":20,"index":20},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-client\\build\\esm\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-client\\build\\esm\\url.js"},{"name":"./manager.js","loc":{"line":2,"column":24,"index":56},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-client\\build\\esm\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-client\\build\\esm\\manager.js"},{"name":"./socket.js","loc":{"line":3,"column":23,"index":95},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-client\\build\\esm\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-client\\build\\esm\\socket.js"},{"name":"socket.io-parser","loc":{"line":51,"column":25,"index":1285},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-client\\build\\esm\\index.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\socket.io-parser\\build\\esm\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Manager\", {\n  enumerable: true,\n  get: function () {\n    return _manager.Manager;\n  }\n});\nObject.defineProperty(exports, \"Socket\", {\n  enumerable: true,\n  get: function () {\n    return _socket.Socket;\n  }\n});\nexports.default = exports.connect = exports.io = lookup;\nObject.defineProperty(exports, \"protocol\", {\n  enumerable: true,\n  get: function () {\n    return _socket2.protocol;\n  }\n});\n\nvar _url = require(\"./url.js\");\n\nvar _manager = require(\"./manager.js\");\n\nvar _socket = require(\"./socket.js\");\n\nvar _socket2 = require(\"socket.io-parser\");\n\n/**\n * Managers cache.\n */\nconst cache = {};\n\nfunction lookup(uri, opts) {\n  if (typeof uri === \"object\") {\n    opts = uri;\n    uri = undefined;\n  }\n\n  opts = opts || {};\n  const parsed = (0, _url.url)(uri, opts.path || \"/socket.io\");\n  const source = parsed.source;\n  const id = parsed.id;\n  const path = parsed.path;\n  const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n  const newConnection = opts.forceNew || opts[\"force new connection\"] || false === opts.multiplex || sameNamespace;\n  let io;\n\n  if (newConnection) {\n    io = new _manager.Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      cache[id] = new _manager.Manager(source, opts);\n    }\n\n    io = cache[id];\n  }\n\n  if (parsed.query && !opts.query) {\n    opts.query = parsed.queryKey;\n  }\n\n  return io.socket(parsed.path, opts);\n} // so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\n\n\nObject.assign(lookup, {\n  Manager: _manager.Manager,\n  Socket: _socket.Socket,\n  io: lookup,\n  connect: lookup\n});\n/**\n * Protocol version.\n *\n * @public\n */"},"sourceMaps":null,"error":null,"hash":"28e14d07d731a2e4b86c1f1cdd939225","cacheData":{"env":{}}}
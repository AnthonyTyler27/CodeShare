{"id":"../node_modules/@mui/base/utils/useMessageBus.js","dependencies":[{"name":"C:\\Users\\Dell\\CodeShare\\package.json","includedInParent":true,"mtime":1686079759432},{"name":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\base\\utils\\package.json","includedInParent":true,"mtime":1685847519050},{"name":"react","loc":{"line":1,"column":23,"index":23},"parent":"C:\\Users\\Dell\\CodeShare\\node_modules\\@mui\\base\\utils\\useMessageBus.js","resolved":"C:\\Users\\Dell\\CodeShare\\node_modules\\react\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMessageBus = createMessageBus;\nexports.default = useMessageBus;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction createMessageBus() {\n  const listeners = new Map();\n\n  function subscribe(topic, callback) {\n    let topicListeners = listeners.get(topic);\n\n    if (!topicListeners) {\n      topicListeners = new Set([callback]);\n      listeners.set(topic, topicListeners);\n    } else {\n      topicListeners.add(callback);\n    }\n\n    return () => {\n      topicListeners.delete(callback);\n\n      if (topicListeners.size === 0) {\n        listeners.delete(topic);\n      }\n    };\n  }\n\n  function publish(topic, ...args) {\n    const topicListeners = listeners.get(topic);\n\n    if (topicListeners) {\n      topicListeners.forEach(callback => callback(...args));\n    }\n  }\n\n  return {\n    subscribe,\n    publish\n  };\n}\n/**\n * @ignore - internal hook.\n */\n\n\nfunction useMessageBus() {\n  const bus = React.useRef();\n\n  if (!bus.current) {\n    bus.current = createMessageBus();\n  }\n\n  return bus.current;\n}"},"sourceMaps":null,"error":null,"hash":"04dc2de092cb4a830e9cf563e57ab40f","cacheData":{"env":{}}}